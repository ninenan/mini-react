(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-runtime"] = global["jsx-runtime"] || {}, global["jsx-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	// 首先判断宿主环境是否支持 symbol，不支持使用自定义的值
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	// jsx 返回的是 ReactElement 的数据结构
	const ReactElement = (type, key, ref, props) => {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'nnn' // 自己随意
	    };
	    return element;
	};
	const hasOwnProperty = Object.prototype.hasOwnProperty;
	const hasOwn = (obj, key) => hasOwnProperty.call(obj, key);
	const jsx = (type, config, ...maybeChildren // 是一个或者多个 ReactElement
	) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        // 判断 key
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        // 判断 ref
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if (hasOwn(config, prop)) {
	            props[prop] = val;
	        }
	        const maybeChildrenLen = maybeChildren.length;
	        // props.children 的存在形式可能是 child 或者是 [child, child, child...]
	        if (maybeChildrenLen) {
	            if (maybeChildrenLen === 1) {
	                // 如果 children 只有一个，直接就是当前项目
	                props.children = maybeChildren[0];
	            }
	            else {
	                // 如果 children 有多个，那就是一个数组
	                props.children = maybeChildren;
	            }
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	const jsxDEV = (type, config) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        // 判断 key
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        // 判断 ref
	        if (props === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[props] = val;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
